require 'spec_helper'

describe Good do
  let( :new_good ) { Good.spawn }
  
  context "validations: " do
    it "is valid with valid attributes" do
      new_good.should be_valid
    end
    
    it "is not valid without a name" do
      new_good.name = nil
      new_good.should_not be_valid
    end
    
    it "is not valid without a frame" do
      new_good.frame = nil
      new_good.should_not be_valid
    end
  end
  
  context "callbacks: " do
    context "before saving: " do
      it "converts its description from Textile to HTML and stores it in html_description" do
        good = Good.generate description: 'A *bold* good.'
        good.html_description.should == '<p>A <strong>bold</strong> good.</p>'
      end
    end
    
    describe "after saving: " do
      it "creates a default variant" do
        good = Good.generate
        good.variants.count.should == 1
      end
      
      it "creates a default option" do
        good = Good.generate
        good.options.count.should == 1
        good.options.first.name.should == 'Type'
      end
    end
  end

  context "methods: " do
    describe "#has_variation?" do
      context "if the good has the default option and the default variant" do
        it "returns false" do
          good = Good.generate # One option and one variant generated by default.
          good.has_variation?.should be_false
        end
      end
      
      context "if the good has more than one option" do
        it "returns true" do
          good = Good.generate
          good.options << Option.generate
          
          good.has_variation?.should be_true
        end
      end
      
      context "if the good has one non-default option" do
        it "returns true" do
          good = Good.generate
          good.options.first.update_attributes name: 'Size'
          
          good.has_variation?.should be_true
        end
      end
      
      context "if the good has more than one variant" do
        it "returns true" do
          good = Good.generate
          good.variants << Variant.generate( good: good )
          
          good.has_variation?.should be_true
        end
      end
      
      context "if the good has one non-default variant" do
        it "returns true" do
          good = Good.generate
          good.variants.first.update_attributes option_value_1: 'Non-Default'
          
          good.has_variation?.should be_true
        end
      end
    end

    describe "#images_in_display_order" do
      it "returns the images in their proper display order" do
        good = Good.generate

        image_1 = Image.generate
        image_2 = Image.generate
        image_3 = Image.generate

        good.images << image_1
        good.images << image_2
        good.images << image_3

        image_3.image_attachers.first.update_attributes display_order_position: :first

        good.images_in_display_order.should == [ image_3, image_1, image_2 ]
      end
    end
  end
end
